//
// ProjectKetchup:
// ---------------
//
// Copyright (c) 2008 Damien Chavarria
//

#ifndef PKF_TYPES_H
#define PKF_TYPES_H

#include "PKTypes.h"
#include <string>
#include <vector>

//
// PKFReturnCode
//

typedef enum {

	PKF_SUCCESS,
	PKF_ERR_OUT_OF_MEMORY,
	PKF_ERR_INVALID_PARAM,
	PKF_ERR_ALREADY_CONNECTED,
	PKF_ERR_NOT_CONNECTED,
	PKF_ERR_NO_MATCHING_TYPES,
	PKF_ERR_NOT_READY,
	PKF_ERR_NOT_ALLOCATED,
	PKF_ERR_ALREADY_ALLOCATED,
	PKF_ERR_OBJECT_NOT_VALID,
	PKF_ERR_ALREADY_LOCKED,
	PKF_ERR_NOT_LOCKED,
	PKF_ERR_NOT_AVAILABLE,
	PKF_ERR_WRONG_CONNECTOR_TYPE,
	PKF_ERR_WRONG_TRANSFER_TYPE,
	PKF_ERR_TYPES_NOT_COMPATIBLE,
	PKF_ERR_CONNECTION_REFUSED,
	PKF_ERR_ALREADY_REGISTERED,
	PKF_ERR_COULDNT_DELETE,

} PKFReturnCode;

//
// PKFFilterCategory
//

typedef enum {

	PKF_FILTER_CATEGORY_NONE,
	PKF_FILTER_CATEGORY_DATA,
	PKF_FILTER_CATEGORY_IMAGE,
	PKF_FILTER_CATEGORY_AUDIO,
	PKF_FILTER_CATEGORY_VIDEO,

} PKFFilterCategory;

//
// PKFFilterType
//

typedef enum {

	PKF_FILTER_TYPE_NONE,
	PKF_FILTER_TYPE_SOURCE,
	PKF_FILTER_TYPE_SINK,
	PKF_FILTER_TYPE_READER,
	PKF_FILTER_TYPE_WRITER,
	PKF_FILTER_TYPE_GENERATOR,
	PKF_FILTER_TYPE_TRANSFORM,
	PKF_FILTER_TYPE_MUXER,
	PKF_FILTER_TYPE_DEMUXER,
	PKF_FILTER_TYPE_DISPLAY,

} PKFFilterType;

//
// PKFDataBufferType
//

typedef enum {

	PKF_DATA_BUFFER_MEMORY,
	PKF_DATA_BUFFER_SCRATCH,

} PKFDataBufferType;

//
// PKFSampleAllocationType
//

typedef enum {

	PKF_SAMPLE_ALLOCATE_DEFAULT,
	PKF_SAMPLE_ALLOCATE_ALL_IN_MEMORY,
	PKF_SAMPLE_ALLOCATE_ALL_IN_SCRATCH,
	PKF_SAMPLE_ALLOCATE_IMAGES_IN_SCRATCH,

} PKFSampleAllocationType;


//
// PKFConnectorType
//

typedef enum {

	PKF_CONNECTOR_TYPE_INPUT,
	PKF_CONNECTOR_TYPE_OUTPUT,

} PKFConnectorType;

//
// PKFTransferType
//

typedef enum {

	PKF_TRANSFER_TYPE_PUSH,
	PKF_TRANSFER_TYPE_PULL,

} PKFTransferType;

//
// PKFMediaType
//

typedef enum {

	PKF_MEDIA_TYPE_DATA,
	PKF_MEDIA_TYPE_IMAGE,
	PKF_MEDIA_TYPE_AUDIO,
	PKF_MEDIA_TYPE_VIDEO,
	PKF_MEDIA_TYPE_CUSTOM,

} PKFMediaType;

//
// PKFImageDataType
//

typedef enum {

	PKF_IMAGE_DATA_TYPE_ANY,
	PKF_IMAGE_DATA_TYPE_8_BITS,
	PKF_IMAGE_DATA_TYPE_16_BITS,
	PKF_IMAGE_DATA_TYPE_FLOAT,

} PKFImageDataType;

//
// PKFFilterStatus
// 

typedef enum {

	PKF_FILTER_STATUS_IDLE,
	PKF_FILTER_STATUS_RUNNING,
	PKF_FILTER_STATUS_INTERRUPTING,

} PKFFilterStatus;

#endif // PKF_TYPES_H
